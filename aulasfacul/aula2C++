#include <iostream>
using namespace std;

// Sub-rotina para validar a nota
bool validarNota(double nota) {
    // Verifica se a nota está no intervalo válido de 0 a 10
    if (nota >= 0 && nota <= 10) {
        return true;  // A nota é válida
    } else {
        return false; // A nota é inválida
    }
}

int main() {
    double nota;  // Declara uma variável para armazenar a nota
    
    // Laço que vai continuar pedindo a nota até que seja válida
    do {
        cout << "Digite a nota do aluno (entre 0 e 10): ";
        cin >> nota;  // Lê a entrada do usuário
        
        if (validarNota(nota)) {  // Chama a função para validar a nota
            cout << "Nota aceita!" << endl;  // Se a nota for válida
        } else {
            cout << "Nota inválida! Tente novamente." << endl;  // Se a nota for inválida
        }
    } while (!validarNota(nota));  // Continua o loop enquanto a nota não for válida

    return 0;  // Finaliza o programa
}


Explicação passo a passo:
1. Inclusão da biblioteca padrão

#A linha #include <iostream> inclui a biblioteca necessária para usar funções de entrada e saída, como cin (entrada) e cout (saída).
#using namespace std; permite que você use diretamente os comandos cin e cout sem precisar escrever std::cin e std::cout.


2. Declaração da sub-rotina validarNota

bool validarNota(double nota) {
    if (nota >= 0 && nota <= 10) {
        return true;  // A nota é válida
    } else {
        return false; // A nota é inválida
    }
}
#A função validarNota recebe um parâmetro do tipo double chamado nota e retorna um valor bool (verdadeiro ou falso).
#Ela verifica se a nota está dentro do intervalo de 0 a 10 (inclusive). Se estiver, retorna true, indicando que a nota é válida; caso contrário, retorna false.

3. Função principal (main)
int main() {
    double nota;
#A função main é a principal do programa, onde a execução começa.
#A variável nota do tipo double é declarada para armazenar a nota que será digitada pelo usuário.

4. Laço de repetição (do-while)
do {
    cout << "Digite a nota do aluno (entre 0 e 10): ";
    cin >> nota;  // Lê a entrada do usuário
#Um laço do-while é usado para garantir que o programa continue pedindo a entrada até que uma nota válida seja informada.
#Dentro do laço, o programa pede ao usuário para digitar a nota e armazena o valor digitado na variável nota.

5. Validação e mensagem ao usuário
    if (validarNota(nota)) {  // Chama a função para validar a nota
        cout << "Nota aceita!" << endl;  // Se a nota for válida
    } else {
        cout << "Nota inválida! Tente novamente." << endl;  // Se a nota for inválida
    }
#A função validarNota é chamada para verificar se a nota informada é válida.
#Se a nota for válida (função retorna true), o programa exibe a mensagem "Nota aceita!".
#Se a nota for inválida (função retorna false), o programa exibe a mensagem "Nota inválida! Tente novamente

6. Condição de continuação do laço
} while (!validarNota(nota));  // Continua o loop enquanto a nota não for válida

#O do-while continua executando o bloco de código até que uma nota válida (nota dentro do intervalo 0-10) seja fornecida.
#O laço vai ser repetido enquanto validarNota(nota) retornar false (ou seja, enquanto a nota não for válida).

7. Finalização do programa
return 0;  // Finaliza o programa

#Quando a nota válida é informada, o laço é interrompido e o programa termina com o retorno 0, indicando que o programa foi executado com sucesso.
